version: 2.1 
orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.0
  snyk: snyk/snyk@0.0.8
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.13-node
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/greendinosaur/gh-commit-info

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory
      - run: npm install # installing newman for API testing
      - run: 
            name: Install newman and reporting utility
            command: sudo npm install -g newman
      - restore_cache: # restores saved cache if no changes are detected since last run
        # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of 
      - run: go get github.com/jstemmer/go-junit-report

      - run:
          name: Run unit tests
            # store the results of our tests in the $TEST_RESULTS directory
          command: |
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES
      - run: make build # pull and build dependencies for the project

      - save_cache: # Store cache in the /go/pkg directory
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run:
          name: Start service
          command: src/api/main
          background: true # keep service running and proceed to next step

      - run:
          name: Validate service is working
          command: |
            sleep 5
            curl --retry 10 --retry-delay 1 -X GET http://localhost:8080/bobby

      - run:
          name: running newman tests
          command: |
            newman run tests/smoke_tests.postman_collection.json -e tests/Localhost.postman_environment.json --reporters cli,json --reporter-json-export ${TEST_RESULTS}/apismoketests.json

      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results

  run_sq_scan: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.13
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/greendinosaur/gh-commit-info
    steps:
      - checkout # check out source code to working directory
      - run: make all # pull and build dependencies for the project
      - sonarcloud/scan
      - store_artifacts:
          path: cp.out
      - store_artifacts:
          path: coverage.html

  run_snyk_scan:
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.13
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/greendinosaur/gh-commit-info
    
    steps:
      - checkout # check out source code to working directory
      - snyk/scan
      

workflows:
  version: 2
  build-workflow:
    jobs:
      - build:
          context: myapp
      - run_sq_scan:
          context: sonarcloud
      - run_snyk_scan:
          context: snyk
    